{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       joe                                                 */\n/*    Created:      4/20/2021                                                    */\n/*    Description:  project that does not follow good code practices                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n#include <cmath> \n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncontroller myController = controller();\n\n//motor stuff\n\nvex::motor frontLeftMotor(vex::PORT5, vex::gearSetting::ratio18_1, false);\nvex::motor frontRightMotor(vex::PORT6, vex::gearSetting::ratio18_1, false);\nvex::motor backLeftMotor(vex::PORT15, vex::gearSetting::ratio18_1, false);\nvex::motor backRightMotor(vex::PORT16, vex::gearSetting::ratio18_1, false);\n// General Funcitons\nbool ResetScreen()\n{\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    return true; //because why not\n}\n\n\nvoid ButtonA_Pressed() {\n    Brain.Screen.print(\"Button A pressed!\");\n}\n\n// Initialize Main Funcs\nvoid autonomous();\nvoid userControl();\n\nint main() {\n    // Stupid auto mode\n    autonomous();\n    ResetScreen();\n\n    // Idot mode\n    // Rocket league!~!1`@1321\n    userControl();\n}\n\nvoid autonomous(){\n    for (int i = 5; i >= 0; i--){\n        Brain.Screen.print(\"Robot mode: Ending in %d seconds\",i);\n        Brain.Screen.newLine();\n        wait(1, seconds);\n    }   \n}\n\nvoid driver(bool rev,double vel, int direction) {\n  if (direction == 0){ // direction fwd/back\n    if (!rev) {\n      frontLeftMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n      frontRightMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n      backLeftMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n      backRightMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n    } else {\n      frontLeftMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n      frontRightMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n      backLeftMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n      backRightMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n    }\n  } else if (direction == 1) { //direction left\n    \n    frontLeftMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n    frontRightMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n    backLeftMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n    //backRightMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n  }\n  else if (direction == 2) { //direction right\n    frontLeftMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n    frontRightMotor.spin(vex::directionType::rev,vel,vex::velocityUnits::pct);\n    backLeftMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n    //backRightMotor.spin(vex::directionType::fwd,vel,vex::velocityUnits::pct);\n  }\n  }\n  //vex::task::sleep(20,msec);\n\n\n\nvoid userControl()\n{\n    Brain.Screen.print(\"Idot mode\");\n    while (true) {\n        ResetScreen();\n        Brain.Screen.print(\"Axis 4 position: %d\",myController.Axis4.position());\n        Brain.Screen.newLine();\n        Brain.Screen.print(\"Axis 3 position: %d\",myController.Axis3.position());\n\n        \n        Brain.Screen.newLine();\n        Brain.Screen.print(\"Axis 2 position: %d\",myController.Axis2.position());\n        Brain.Screen.newLine();\n        Brain.Screen.print(\"Axis 1 position: %d\",myController.Axis1.position());\n\n\n        if (myController.Axis3.position() > 0) {\n          driver(false,myController.Axis3.position()/2,0);\n        } else if (myController.Axis3.position() < 0) {\n          driver(true,std::abs(myController.Axis3.position())/2,0);\n        }\n\n        if (myController.Axis4.position() > 0) {\n          driver(false,myController.Axis4.position()/2,2);\n        } else if (myController.Axis4.position() < 0) {\n          driver(true,std::abs(myController.Axis4.position())/2,1);\n        }\n        if (myController.Axis3.position() == 0){\n          frontLeftMotor.stop();\n          frontRightMotor.stop();\n          backLeftMotor.stop();\n          backRightMotor.stop();\n        }\n        \n\n        wait(20,msec);\n    }\n    \n}","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}